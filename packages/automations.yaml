automation:
  - alias: "System - Startup Services"
    mode: single
    trigger:
      - trigger: homeassistant
        event: start
    action:
      # Reset Admin Mode
      - action: input_boolean.turn_off
        target:
          entity_id: input_boolean.admin_mode
      # Set Admin PIN
      - action: input_text.set_value
        data:
          value: "{{ states('input_text.system_pin') + states('input_text.location_pin') }}"
        target:
          entity_id: input_text.admin_pin_code
      # Set Theme to SmartQasa
      - action: frontend.set_theme
        data:
          name: SmartQasa
      # Wait for 2 minutes
      - delay:
          minutes: 3
      # Refresh Devices
      - action: input_button.press
        target:
          entity_id: input_button.refresh_devices
      # Run Watchman
      - action: watchman.report
        data:
          create_file: true
          send_notification: false
          parse_config: false
          chunk_size: false

  - alias: "System - Periodic Restart"
    mode: single
    trigger:
      - platform: time
        at: "04:00:00"
    action:
      - if:
          - condition: time
            weekday:
              - sun
        then:
          - action: input_button.press
            target:
              entity_id: input_button.reboot_devices
          - delay:
              minutes: 5
          - action: hassio.host_reboot
        else:
          - action: homeassistant.restart

  - alias: "System - Shutdown Services"
    mode: single
    trigger:
      - trigger: homeassistant
        event: shutdown
    actions:
      # Update Repositories
      - action: shell_command.update_repos

  - alias: "System - Set Admin PIN on PIN change."
    mode: single
    trigger:
      - trigger: homeassistant
        event: start
      - trigger: state
        entity_id:
          - input_text.system_pin
      - trigger: state
        entity_id:
          - input_text.location_pin
    action:
      - action: input_text.set_value
        data:
          value: "{{ states('input_text.system_pin') + states('input_text.location_pin') }}"
        target:
          entity_id: input_text.admin_pin_code

  - alias: "System - Reset Admin Mode on Timeout"
    mode: single
    trigger:
      - trigger: state
        entity_id:
          - input_boolean.admin_mode
        to: "on"
        for:
          hours: 1
    action:
      - action: input_boolean.turn_off
        target:
          entity_id: input_boolean.admin_mode

  - alias: "System - Toggle Tablet Screens for Light/Dark Mode"
    mode: single
    trigger:
      - trigger: sun
        event: sunrise
        offset: "00:05:00"
      - trigger: sun
        event: sunset
        offset: "00:05:00"
    action:
      - action: switch.turn_off
        target:
          entity_id: >-
            {{ states.switch|selectattr("entity_id", "search",
            "tablet_screen$")|map(attribute="entity_id")|list }}
      - delay:
          seconds: 1
      - action: switch.turn_on
        target:
          entity_id: >-
            {{ states.switch|selectattr("entity_id", "search",
            "tablet_screen$")|map(attribute="entity_id")|list }}

  - alias: "System - Refresh Devices on Lovelace update"
    mode: single
    triggers:
      - trigger: event
        event_type: lovelace_updated
    actions:
      - action: browser_mod.refresh

  - alias: System - Stop Window Shades on Timeout
    description: ""
    triggers:
      - trigger: state
        entity_id:
          - cover.all_window_shades
        to: opening
        for:
          hours: 0
          minutes: 1
          seconds: 0
      - trigger: state
        entity_id:
          - cover.all_window_shades
        to: closing
        for:
          hours: 0
          minutes: 1
          seconds: 0
    actions:
      - action: cover.stop_cover
        target:
          entity_id: cover.all_window_shades
    mode: single

  - alias: System - Monitor UPS
    description: "Sends notifications when the status of the UPS changes."
    triggers:
      - entity_id:
          - sensor.myups_status_data
        trigger: state
        to: null
        id: status_change
      - trigger: numeric_state
        entity_id:
          - sensor.myups_battery_charge
        from: 5
        below: 5
        id: battery_critical
    conditions:
      - condition: and
        conditions:
          - condition: trigger
            id: status_change
          - condition: template
            value_template: >
              {{ trigger.from_state.state | default('') != trigger.to_state.state | default('') }}
    actions:
      - choose:
          - conditions:
              - condition: trigger
                id: status_change
            sequence:
              - action: script.send_notification
                data:
                  log_level: >
                    {% if states('sensor.myups_status_data') | default('') | string | trim | regex_match('^OL.*') %}
                    INFO
                    {% else %}
                    WARNING
                    {% endif %}
                  location_id: "{{ states('input_text.location_id') | default('Undefined Location') }}"
                  event: "UPS Status Change"
                  details: |
                    The state of the UPS connected has changed to {{ states('sensor.myups_status') }} ({{ states('sensor.myups_status_data') }})

                    - Input voltage: {{ states('sensor.myups_input_voltage') }}v
                    - Present load: {{ states('sensor.myups_load') }}%

                    - Battery level: {{ states('sensor.myups_battery_charge') }}%
                    - Runtime remaining: {{ (states('sensor.myups_battery_runtime') | float(0) / 60) | int }}min
          - conditions:
              - condition: trigger
                id: battery_critical
            sequence:
              - action: script.send_notification
                data:
                  log_level: CRITICAL
                  location_id: "{{ states('input_text.location_id') | default('Undefined Location') }}"
                  event: "UPS Battery Level Critical"
                  details: |
                    The UPS battery level is critically low ({{ states('sensor.myups_battery_charge') }}%).

                    A shutdown command has been sent to the HA server.
              - delay:
                  seconds: 5
              - actions: input_boolean.turn_off
                target:
                  entity_id: input_boolean.forced_shutdown
              - action: hassio.host_shutdown
    mode: single
