automation:
  - alias: "System - Startup Services"
    mode: single
    trigger:
      - trigger: homeassistant
        event: start
    action:
      # Reset Admin Mode
      - action: input_boolean.turn_off
        target:
          entity_id: input_boolean.admin_mode
      # Set Admin PIN
      - action: input_text.set_value
        data:
          value: "{{ states('input_text.system_pin') + states('input_text.location_pin') }}"
        target:
          entity_id: input_text.admin_pin_code
      # Set Theme to SmartQasa
      - action: frontend.set_theme
        data:
          name: SmartQasa
      # Refresh Devices
      - action: input_button.press
        target:
          entity_id: input_button.refresh_devices
        data: {}
      # Run Watchman
      - delay:
          minutes: 2
      - action: watchman.report
        data:
          create_file: true
          send_notification: false
          parse_config: false
          chunk_size: false

  - alias: "System - Nightly Restart"
    mode: single
    trigger:
      - platform: time
        at: "04:00:00"
    action:
      - if:
          - condition: time
            weekday:
              - sun
        then:
          - action: input_button.press
            target:
              entity_id: input_button.reboot_devices
          - delay:
              seconds: 60
          - action: input_button.press
            target:
              entity_id: input_button.refresh_devices
          - action: hassio.host_reboot
        else:
          - action: homeassistant.restart

  - alias: "System - Shutdown Services"
    mode: single
    trigger:
      - trigger: homeassistant
        event: shutdown
    conditions: []
    actions:
      # Update Repositories
      - action: shell_command.update_repos
        data: {}

  - alias: "System - Set Admin PIN when PINs change."
    mode: single
    trigger:
      - trigger: homeassistant
        event: start
      - trigger: state
        entity_id:
          - input_text.system_pin
      - trigger: state
        entity_id:
          - input_text.location_pin
    condition: []
    action:
      - action: input_text.set_value
        data:
          value: "{{ states('input_text.system_pin') + states('input_text.location_pin') }}"
        target:
          entity_id: input_text.admin_pin_code

  - alias: "System - Reset Admin Mode on Timeout"
    mode: single
    trigger:
      - trigger: state
        entity_id:
          - input_boolean.admin_mode
        to: "on"
        for:
          hours: 1
    action:
      - action: input_boolean.turn_off
        target:
          entity_id: input_boolean.admin_mode

  - alias: "System - Toggle Tablet Screens for Light/Dark Mode"
    mode: single
    trigger:
      - trigger: sun
        event: sunrise
        offset: "00:05:00"
      - trigger: sun
        event: sunset
        offset: "00:05:00"
    action:
      - action: switch.turn_off
        data: {}
        target:
          entity_id: >-
            {{ states.switch|selectattr("entity_id", "search",
            "tablet_screen$")|map(attribute="entity_id")|list }}
      - delay:
          seconds: 1
      - action: switch.turn_on
        data: {}
        target:
          entity_id: >-
            {{ states.switch|selectattr("entity_id", "search",
            "tablet_screen$")|map(attribute="entity_id")|list }}

  - alias: "System - Refresh Devices on Lovelace update"
    mode: single
    triggers:
      - trigger: event
        event_type: lovelace_updated
    conditions: []
    actions:
      - action: browser_mod.refresh
  #
  #  - alias: System - Activate Phase Trigger
  #    description: ""
  #    triggers:
  #      - trigger: state
  #        entity_id: input_select.location_phase
  #    conditions: []
  #    actions:
  #      - action: input_button.press
  #        target:
  #          entity_id: input_button.location_phase
  #        data: {}
  #    mode: single

  - alias: System - Stop Window Shades
    description: ""
    triggers:
      - trigger: state
        entity_id:
          - cover.all_window_shades
        to: opening
        for:
          hours: 0
          minutes: 1
          seconds: 0
      - trigger: state
        entity_id:
          - cover.all_window_shades
        to: closing
        for:
          hours: 0
          minutes: 1
          seconds: 0
    conditions: []
    actions:
      - action: cover.stop_cover
        metadata: {}
        data: {}
        target:
          entity_id: cover.all_window_shades
    mode: single
