automation:
  - alias: "System - Startup Services"
    mode: single
    trigger:
      - trigger: homeassistant
        event: start
    action:
      # Reset Admin Mode
      - action: input_boolean.turn_off
        data: {}
        target:
          entity_id: input_boolean.admin_mode
      # Set Admin PIN
      - action: input_text.set_value
        data:
          value: "{{ states('input_text.system_pin') + states('input_text.location_pin') }}"
        target:
          entity_id: input_text.admin_pin_code
      # Refresh Devices
      - delay:
          minutes: 5
      - action: browser_mod.refresh
        data: {}
      - delay:
          seconds: 10
      - action: input_button.press
        data: {}
        target:
          entity_id: input_button.refresh_devices
      # Set Theme to SmartQasa
      - delay:
          seconds: 30
      - action: frontend.set_theme
        data:
          name: SmartQasa
      # Reload Themes
      - delay:
          seconds: 5
      - action: frontend.reload_themes
        data: {}

      # Run Watchman
      - action: watchman.report
        data:
          create_file: true
          send_notification: false
          parse_config: false
          chunk_size: false

  - alias: "System - Periodic Restart"
    mode: single
    trigger:
      - platform: time
        at: "04:00:00"
    action:
      - if:
          - condition: time
            weekday:
              - sun
        then:
          - action: input_button.press
            data: {}
            target:
              entity_id: input_button.reboot_devices
          - delay:
              minutes: 3
          - action: hassio.host_reboot
        else:
          - action: homeassistant.restart

  - alias: "System - Reload Themes after Tablet Refresh/Reboot"
    mode: single
    triggers:
      - trigger: state
        entity_id:
          - input_button.refresh_devices
        id: refresh
      - trigger: state
        entity_id:
          - input_button.reboot_devices
        id: reboot
    conditions: []
    actions:
      - choose:
          - conditions:
              - condition: trigger
                id:
                  - refresh
            sequence:
              - delay:
                  hours: 0
                  minutes: 0
                  seconds: 15
                  milliseconds: 0
          - conditions:
              - condition: trigger
                id:
                  - reboot
            sequence:
              - delay:
                  hours: 0
                  minutes: 1
                  seconds: 0
                  milliseconds: 0
      - action: frontend.reload_themes
        data: {}
      - action: automation.trigger
        data:
          skip_condition: true
        target:
          entity_id:
            - automation.time_tablet_brightness_bedroom
            - automation.time_tablet_brightness_common

  - alias: "System - Shutdown Services"
    mode: single
    trigger:
      - trigger: homeassistant
        event: shutdown
    actions:
      # Update Repositories
      - action: shell_command.update_repos
        data: {}

  - alias: "System - Set Admin PIN on PIN change."
    mode: single
    trigger:
      - trigger: homeassistant
        event: start
      - trigger: state
        entity_id:
          - input_text.system_pin
      - trigger: state
        entity_id:
          - input_text.location_pin
    action:
      - action: input_text.set_value
        data:
          value: "{{ states('input_text.system_pin') + states('input_text.location_pin') }}"
        target:
          entity_id: input_text.admin_pin_code

  - alias: "System - Reset Admin Mode on Timeout"
    mode: single
    trigger:
      - trigger: state
        entity_id:
          - input_boolean.admin_mode
        to: "on"
        for:
          hours: 1
    action:
      - action: input_boolean.turn_off
        data: {}
        target:
          entity_id: input_boolean.admin_mode

  - alias: "System - Toggle Tablet Screens for Light/Dark Mode"
    mode: single
    #    variables:
    #      tablet_screens: >-
    #        {{ states.switch | selectattr("entity_id", "search",
    #        "tablet_screen$") | map(attribute="entity_id") | list }}
    trigger:
      - trigger: sun
        event: sunrise
        offset: "00:05:00"
      - trigger: sun
        event: sunset
        offset: "00:05:00"
    action:
      #- action: switch.turn_off
      #  target:
      #    entity_id: "{{ tablet_screens }}"
      #- delay:
      #    seconds: 1
      #- action: switch.turn_on
      #  target:
      #    entity_id: "{{ tablet_screens }}"
      - action: input_button.press
        target:
          entity_id: input_button.flash_devices

  - alias: "System - Refresh Devices on Lovelace update"
    mode: single
    triggers:
      - trigger: event
        event_type: lovelace_updated
    actions:
      - action: browser_mod.refresh
        data: {}

  - alias: System - Stop Window Shades on Timeout
    description: ""
    triggers:
      - trigger: state
        entity_id:
          - cover.all_window_shades
        to: opening
        for:
          hours: 0
          minutes: 1
          seconds: 0
      - trigger: state
        entity_id:
          - cover.all_window_shades
        to: closing
        for:
          hours: 0
          minutes: 1
          seconds: 0
    actions:
      - action: cover.stop_cover
        data: {}
        target:
          entity_id: cover.all_window_shades
    mode: single
