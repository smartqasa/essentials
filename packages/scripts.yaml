script:
  system_tablet_reload:
    alias: System - Refresh Tablets
    icon: mdi:tablet-dashboard
    sequence:
      - action: browser_mod.refresh
        data: {}
    #      - action: button.press
    #        data: {}
    #        target:
    #          entity_id: >-
    #            {{ states.button | selectattr("entity_id", "search",
    #            "tablet_load_start_url$") | map(attribute="entity_id") | list }}
    #      - action: input_button.press
    #        data: {}
    #        target:
    #          entity_id: input_button.tablet_brightness
    mode: single

  system_tablet_restart:
    alias: System - Restart Tablets
    icon: mdi:tablet-dashboard
    sequence:
      - action: button.press
        data: {}
        target:
          entity_id: >-
            {{ states.button|selectattr("entity_id", "search",
            "tablet_restart_browser$")|map(attribute="entity_id")|list }}
      - action: input_button.press
        data: {}
        target:
          entity_id: input_button.tablet_brightness
    mode: single

  #  system_locate_roku_remote:
  #    alias: System - Locate Roku Remote
  #    fields:
  #      entity:
  #        description: Roku Entity ID
  #    sequence:
  #      - action: remote.send_command
  #        data:
  #          command: find_remote
  #        target:
  #          entity_id: "{{ entity | replace('media_player.', 'remote.') }}"
  #    mode: single

  system_toggle_shade:
    alias: System - Toggle Window Shade
    sequence:
      - choose:
          - conditions:
              - condition: template
                value_template: "{{ is_state(entity[0], 'closed') }}"
            sequence:
              - if:
                  - condition: template
                    value_template: "{{ tilt > 0 and tilt < 100 }}"
                then:
                  - action: cover.set_cover_position
                    data:
                      position: "{{ tilt }}"
                    target:
                      entity_id: "{{ entity }}"
                  - delay:
                      seconds: "{{ tilt }}"
                  - action: cover.stop_cover
                    target:
                      entity_id: "{{ entity }}"
                else:
                  - action: cover.open_cover
                    target:
                      entity_id: "{{ entity }}"
          - conditions:
              - condition: template
                value_template: "{{ is_state(entity[0], 'opening') or is_state(entity, 'closing') }}"
            sequence:
              - action: cover.stop_cover
                target:
                  entity_id: "{{ entity }}"
        default:
          - action: cover.close_cover
            target:
              entity_id: "{{ entity }}"
    mode: parallel
    max: 10
    max_exceeded: silent

  system_toggle_volume_muted:
    alias: System - Toggle Volume Muted
    fields:
      entity_id:
        description: Media Player Entity ID
      volume_prev:
        description: Previous Volume
    sequence:
      - if:
          - condition: template
            value_template: "{{ is_state_attr(entity_id, 'is_volume_muted', false) }}"
        then:
          - action: media_player.volume_mute
            data:
              is_volume_muted: true
            target:
              entity_id: "{{ entity_id }}"
        else:
          - action: media_player.volume_mute
            data:
              is_volume_muted: false
            target:
              entity_id: "{{ entity_id }}"
    mode: queued
    max: 10
    max_exceeded: silent

  system_color_light_sequence_selector:
    alias: System - Color Light Sequence Selector
    icon: mdi:lightbulb
    fields:
      entity:
        description: The entity id of the light to control
      count:
        description: Number of times to cycle the light
    sequence:
      - action: homeassistant.turn_on
        data: {}
        target:
          entity_id: "{{ entity }}"
      - delay:
          hours: 0
          minutes: 0
          seconds: 1
          milliseconds: 0
      - action: homeassistant.turn_off
        data: {}
        target:
          entity_id: "{{ entity }}"
      - delay:
          hours: 0
          minutes: 0
          seconds: 5
          milliseconds: 0
      - action: homeassistant.turn_on
        data: {}
        target:
          entity_id: "{{ entity }}"
      - repeat:
          count: "{{ count }}"
          sequence:
            - delay:
                hours: 0
                minutes: 0
                seconds: 1
                milliseconds: 0
            - action: homeassistant.turn_off
              data: {}
              target:
                entity_id: "{{ entity }}"
            - delay:
                hours: 0
                minutes: 0
                seconds: 1
                milliseconds: 0
            - action: homeassistant.turn_on
              data: {}
              target:
                entity_id: "{{ entity }}"
    mode: queued
    max: 10
    max_exceeded: silent

  system_momentary_mute:
    alias: System - Momentary Mute
    icon: mdi:speaker-off
    mode: restart
    sequence:
      - action: media_player.volume_set
        data:
          entity_id: "{{ entity }}"
          volume_level: "{{ mute_level }}"
      - delay:
          seconds: 1
      - wait_template: "{{ state_attr(entity, 'volume_level') != mute_level }}"
        timeout:
          seconds: "{{ duration }}"
        continue_on_timeout: true
      - action: media_player.volume_set
        data:
          entity_id: "{{ entity }}"
          volume_level: "{{ play_level }}"
    fields:
      entity:
        description: "Entity ID of the Media Player device"
      mute_level:
        description: "Volume level to set during the muted period"
        example: "0.1"
      duration:
        description: "Number of seconds to keep the volume at the specified level"
        example: "60"
      play_level:
        description: "Volume level to restore after the duration"
        example: "0.5"

  system_send_notification:
    alias: System - Send Notification
    description: Sends a notification with the specified title and message
    fields:
      log_level:
        description: The log level of the notification (e.g., INFO, WARNING, ERROR)
        example: "INFO"
      location_id:
        description: The location ID for the notification
        example: "cust.st.001.01"
      event:
        description: The description of the event
        example: "UPS Status Change"
      details:
        description: The details of the event
        example: "The state of the UPS has changed to OL (OL CHRGNG)"
    sequence:
      - action: notify.smartqasa_support
        data:
          title: "{{ log_level }}: {{ location_id }} - {{ event }}"
          message: "{{ details | trim }}"
